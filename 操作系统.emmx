大内核
    将操作系统的主要功能模块都作为系统内核，运行在核心态
    优点：高性能
    缺点：内核代码庞大，结构混乱，难以维护
用户直接调用
“系统调用”，用户通过程序间接调用
程序状态字寄存器（PSW）中的标志位来标识当前处理器处于什么状态
0为用户态，1为核心态
如Windows、安卓\ios、macOS的图形化操作界面
此时cpu只能执行非特权指令
用户态—>核心态状态的切换是通过中断实现的，且中断是唯一途径
核心态 ->用户态状态的切换是通过执行一个特权指令，将程序状态字（PSW）的标志位设为0
特权指令、非特权都可执行
并行指的是微观上也同时发生，如N核CPU可并行执行N个程序，而超过N个应用程序的运行是并发执行的
（内核）与硬件关联较为紧密的模块
一个时间段内只允许一个进程额访问该资源（如使用qq和微信视频，摄像头资源只能分享给一个进程
允许一个时间段内有多个进程“同时”对他们进行访问（如 使用QQ发送文件A和微信发送文件B，两个进程都在“同时”访问硬盘资源，并发执行）
有的操作系统不把这部分功能归为内核功能
内存中仅有一道程序运行
CPU有大量的时间在等待I/O操作完成
信号来源：CPU内部，与当前执行的指令有关
系统调用发生在用户态，对系统调用的处理发生在核心态，执行陷入指令会产生内中断，使处理器从用户态进入核心态
如系统调用时使用的访问指令（又叫trap指令）
如：缺页
如：整数除零（即使操作系统介入也无法修复）
操作系统
    概念
        负责管理协调硬件、软件等计算机资源的工作
        为上层用户、应用程序提供简单易用的服务
        是一种系统软件
    功能和目标
        资源的管理者
            理机管理（cpu step3:qq正常运行 ) 
            存储器管理（将程序相关数据放入内存 step2:双击打开qq）
            文件管理（逐层打开文件夹 step1:找到qq.exe的存放位置）
            设备管理（step4:分配摄像头给qq进程 ）
        作为用户和计算机硬件之间的接口
            提供的功能
                命令接口
                    用户直接调用
                    联机命令接口（如cmd 逐条处理)
                    脱机命令接口(如.bat文件 批量处理）
                程序接口（由一组程序系统调用组成）
                    “系统调用”，用户通过程序间接调用
                GUI（用户图形界面）
                    如Windows、安卓\ios、macOS的图形化操作界面
            目标
                方便用户使用计算机
        作为最接近硬件的层次
            目标
                实现对硬件机器的扩展
    特征
        并发
            并行指的是微观上也同时发生，如N核CPU可并行执行N个程序，而超过N个应用程序的运行是并发执行的
            宏观上同时发生
            微观上交替发生
        共享
            互斥共享
                一个时间段内只允许一个进程额访问该资源（如使用qq和微信视频，摄像头资源只能分享给一个进程
            同时共享
                允许一个时间段内有多个进程“同时”对他们进行访问（如 使用QQ发送文件A和微信发送文件B，两个进程都在“同时”访问硬盘资源，并发执行）
        虚拟
            空分复用技术
            时分复用技术
            举例
        异步
    发展和分类
        手工操作阶段
            缺：人机速度矛盾，长时间等待I/O操作
        批处理阶段
            单道批处理系统
                内存中仅有一道程序运行
CPU有大量的时间在等待I/O操作完成
                缺：资源利用率低
                优：缓解了人机速度矛盾
            多道批处理系统
                优：多道程序并发进行，资源利用率高
                缺：不提供人机交互
        分时操作阶段
            计算机以时间片为单位轮流为各个用户/作业服务
各个用户可以通过终端与计算机进行交互（不能优先处理紧急任务）
                优：提供人机交互
                缺：不能优先处理紧急任务
        实时操作阶段
            硬实时系统
                必须在严格的规定时间内完成处理
            软实时系统
                能接受偶尔违反时间规定
            优：能优先处理紧急任务
        网络操作系统
        分布式操作系统
        个人计算机操作系统
    进程
        定义
            在计算机发展史上，“进程是为了解决什么问题而引入的？
        组成
            PCB
                进程的管理者（操作系统）所需的数据都在PCB中
                进程描述信息
                    进程标识符PID
                        进程被创建时，操作系统会为该进程分配一个唯一的不重复的ID
                    用户标识符UID
                进程控制和管理信息
                    进程当前状态
                    进程优先级
                资源分配清单
                    程序段指针
                    数据段指针
                    键盘
                    鼠标
                处理机相关信息
                    各种寄存器值
                        当进程切换时，需要把进程当前的运行状态记录下来并保存在PCB中，如程序计数器的值表示当前程序执行到了哪一步
            程序段
                存放需要执行的代码
            代码段
                存放程序运行过程中处理的各种数据
            程序本身需要的数据
        组织方式
            链接方式
                按照进程状态将PCB分成多个队列
                操作系统持有指向各个队列的指针
            索引方式
                根据进程状态的不同，建立几张索引表
                操作系统持有指向各个索引的指针
            概要
                执行指针
                    指向当前处于运行态的（被CPU执行）的进程（单CPU）计算机中同一时刻只有一个进程处于运行态
                就绪队列指针
                    指向当前处于就绪态的进程
                        通常会把优先级高的进程放在队头
                阻塞队列指针
                    指向当前处于阻塞态的进程，很多操作系统还会根据阻塞原因不同再分为多个阻塞队列
        特征
            动态性
            独立性
            异步星
            结构性
            并发性
        状态
            运行状态
                占有CPU，并在CPU上运行
            就绪状态
                已经具备运行条件，但由于没有空闲CPU而暂时不能运行
            阻塞状态
                因等待某一事件而暂时不能运行
            三种基本状态
            创建状态
                进程正在被创建，操作系统为进程分配资源、初始化PCB
            终止状态
                进程正在从系统中撤销，操作系统会回收进程拥有的资源、撤销PCB
        状态间的转换
    系统调用
        系统调用的相关处理需要在核心态下完成
        什么是系统调用？有何作用
            操作系统提供给应用程序使用的接口
            应用程序通过系统调用来请求获得操作系统的服务
            系统会使处理器从用户态进入核心态
            分类
                凡是和资源有关的操作，会直接影响到其他进程的操作，一定需要操作系统介入，即需要通过系统调用来实现
                设备管理
                文件管理
                进程控制
                进程通信
                内存管理
        系统调用和库函数的区别
            系统调用是操作系统对上层提供的接口
            有的库函数是对系统调用的进一步封装
            当今编写的应用程序大多是通过高级语言提供的库函数间接地进行系统调用
        系统调用背后的过程
            1、传递系统调用指令
            2、执行陷入指令
            3、执行系统调用相应服务程序
            4、返回用户程序
            系统调用发生在用户态，对系统调用的处理发生在核心态，执行陷入指令会产生内中断，使处理器从用户态进入核心态
    中断和异常
        内中断（也称异常、例外、陷入）
            信号来源：CPU内部，与当前执行的指令有关
            自愿中断——指令中断
                如系统调用时使用的访问指令（又叫trap指令）
            强迫中断
                硬件故障
                    如：缺页
                软件中断
                    如：整数除零（即使操作系统介入也无法修复）
        外中断（狭义中断）
            信号来源：CPU外部，与当前执行的指令无关
            外设请求
                如:I/O操作完成发出的中断信号
            人工干预
                如：用户强制终止一个进程
    运行机制和体系结构
        两种指令
            特权指令（如删除、修改等）
            非特权指令
        两种处理器状态
            程序状态字寄存器（PSW）中的标志位来标识当前处理器处于什么状态
0为用户态，1为核心态
            用户态（目态）
                此时cpu只能执行非特权指令
            核心态（管态）
                特权指令、非特权都可执行
            用户态—>核心态状态的切换是通过中断实现的，且中断是唯一途径
核心态 ->用户态状态的切换是通过执行一个特权指令，将程序状态字（PSW）的标志位设为0
        两种程序
            内核程序
                操作系统的内核程序是系统管理者，即可执行特权也可执行非特权指令，运行在核心泰
            应用程序
                只能执行非特权指令，运行在用户态
        内核
            时钟管理
                实现计时功能（任务的时间分配等）
            中断处理
                负责实现中断机制
            原语
                是一种特殊的程序
                处于操作系统最底层，是最接近硬件的部分
                这种程序运行具有原子性——运行只能一气呵成不能中断
                运行时间较短，调用频繁
            （内核）与硬件关联较为紧密的模块
            对系统资源进行管理的功能
                进程管理
                存储器管理
                设备管理
                有的操作系统不把这部分功能归为内核功能
            大内核
                将操作系统的主要功能模块都作为系统内核，运行在核心态
                优点：高性能
                缺点：内核代码庞大，结构混乱，难以维护
        微内核
            只把最基本的功能保留再内核
            优点：内核功能少，结构清晰，方便维护
            缺点：需要频繁的在核心态和用户态之间切换，性能低
信号来源：CPU外部，与当前执行的指令无关
如:I/O操作完成发出的中断信号
凡是和资源有关的操作，会直接影响到其他进程的操作，一定需要操作系统介入，即需要通过系统调用来实现
进程被创建时，操作系统会为该进程分配一个唯一的不重复的ID
进程的管理者（操作系统）所需的数据都在PCB中
如：用户强制终止一个进程
系统调用的相关处理需要在核心态下完成
当进程切换时，需要把进程当前的运行状态记录下来并保存在PCB中，如程序计数器的值表示当前程序执行到了哪一步
程序本身需要的数据
概要
    执行指针
        指向当前处于运行态的（被CPU执行）的进程（单CPU）计算机中同一时刻只有一个进程处于运行态
    就绪队列指针
        指向当前处于就绪态的进程
            通常会把优先级高的进程放在队头
    阻塞队列指针
        指向当前处于阻塞态的进程，很多操作系统还会根据阻塞原因不同再分为多个阻塞队列
三种基本状态
