自研芯片定制测试仪表
    现状
        1、GE接口测试仪表连续性的问题
            1、商用仪表涉A，不可获得
            2、自研Tesgine3.0不支持GE，Tesgine2.0面临停产
        2、为了缩短单芯片的TTM，通过复制测试环境来提升测试的并行度，测试环境越多，对测试仪表的需求量越多，目前经费和实验室面积不能充分满足环境扩容的需求
        3、现有主用测试仪表Tesgine2.0/3.0不能满足测试需求
            1、以太接口的半双工功能
            2、以太接口802.3BR帧抢占功能
            3、超短帧等
            4、...
    目标
        通过自研芯片定制测试仪表，用于支撑芯片的功能测试
        目标设定原因说明
            1、性能测试结果需要向外提供，自研芯片定制测试仪表无法自证测试数据的可信度
            2、自研芯片定制测试仪表主要用于芯片维护环境
                芯片验证分FPGA、ASIC和维护三个验证阶段
                FPGA和ASIC阶段重点在于芯片逻辑功能的验证
                    项目持续投入时间明确，仪表需求可控
                维护阶段聚焦于SDK的验证
                    随着芯片的转维仪表需求持续递增
    需求
        发送方向
            报文构造
                1、支持多个端口同时发包
                2、支持同一个物理端口构造多条业务流
                3、支持基于业务流配置报文内容
            流量控制
                发送速率
                    1、基于业务流可配置报文发送速率
                        限制
                            配置粒度为pps
                            速率不超过10000pps
                报文统计
                    1、支持基于业务流统计发送报文数和字节数
        接收方向
            报文校验
                1、支持基于业务流使能或关闭报文捕获功能
                    限制
                        每条业务流最多捕获256个报文
                2、支持报文内容的域段解析
                3、支持报文FCS校验
            流量监控
                报文统计
                    1、支持基于业务流统计接收报文数和字节数
        需求文档
            传送与接入/Access Asic/Docs/Access SD5182T/V100R001C00/06.SW Test/02.接入测试组/2.1 测试设计/2.1.4 周边依赖/2.1.4.2 软件需求/SD5182T芯片DFT命令行需求基线v0.61.xls
    方案
        收发包处理流程
            发送方向
                1、软件按照配置产生报文净荷
                2、软件将报文净荷写到周期发包的通道的缓存区中
                    描述符
                    报文净荷
                3、软件根据发包速率配置周期发包通道的发包周期
                4、软件根据需求使能和关闭周期发包通道发包
                    清除通道的收发统计
                    修改通道的当前发包序列号，保证发包计数从0开始
                    通道级使能
                    全局使能
                5、微码基于出端口和业务流进行报文和字节数的统计
                6、微码将报文末尾添加TestBlock
                    业务流ID
                    报文序列号
                7、微码将报文向指定的端口转发报文
                8、ETH MAC在发送报文时添加FCS
            接收方向
                1、ETH AMC在接收报文时进行FCS校验、并随包携带FCS校验结果
                2、微码基于源端口和业务流进行报文和字节数的统计
                3、微码将报文发送给PIE
                    使能FCS错误报文正常转发
                    微码添加PIE pktinfo，在其中携带源端口、FCS校验结果等信息
                4、软件从PIE获取报文，并解析TestBlock
                    基于业务流缓存报文
                    基于报文序列号进行乱序检测
    实现
        初始化
            周期发包通道初始化
                基于通道初始化
                    发包属性
                        ptx_period
                            发包周期
                                10
                                    1ms，默认发包速率为1000pps
                        event_mode
                            报文类型
                                0
                                    packet报文
                        ptx_mode
                            发包模式
                                0
                                    连续发包
                        seq_id
                            发包序列号
                                0
                                    当seq_id达到ptx_sn_max时翻转为0
                        ptx_pkt_cnt
                            发包统计
                                0
                                    统计清0
                    描述符
                        格式
                        ptx_sn_max
                            最大序列号
                                8191
                                    当seq_id达到ptx_sn_max时翻转为0
                        pkt_length
                            报文长度
                                120
                                    注1：MAC会在报文后面加上4字节FCS，所以pkt_length需要在配置值的基础上减4
                                    注2：微码需要会在报文尾部添加4字节testblock，所以pkt_length需要在配置值的基础上减4
                                注：pkt_length配置为120，实际报文长度为128
                        tx_buf_ptr
                            描述符对应报文缓存区的地址
                        qid
                            报文转发对应的队列号
                                用于微码指定队列转发
                        port_id
                            报文出端口编号
                                用于微码进行出端口的报文字节数统计
                        csum_en
                            TCP/UDP的Checksum刷新使能位
                        csum_type
                            TCP和UDP报文类型
                        css
                            TCP/UDP的Checksum计算的起始位置
                        streamidx
                            报文流索引
                    报文净荷
                        分配9600B的报文缓存地址空间
                            地址清零
            收包通道初始化
                使用一个收包通道收包
                    报文和字节数统计
                        清零
                    描述符
                        个数
                            32
                        格式
                        fcs
                            FCS错误指示位（1有效）
                                微码添加
                                    MAC产生
                        portid
                            报文入端口号
                                微码添加
                        streamidx
                            报文流索引
                                微码添加
                    报文净荷
                        分配9600B的报文缓存地址空间
                            地址清零
            eth
                发送方向
                    使能添加FCS
                    关闭PAD功能
                接收方向
                    使能FCS校验和删除
        报文配置
            报文格式
                payload+testblock+fcs
                    payload
                        报文净荷，由软件产生
                            支持构造报文类型
                                eth
                                    eth
                                    snap
                                ip
                                    ipv4
                                    ipv6
                                ppp
                                    pppoe
                                    pppoe_ipv4
                                    pppoe_ipv6
                                tcp
                                    tcp
                                    ipv4_tcp
                                    ipv6_tcp
                                    pppoe_ipv4_tcp
                                    pppoe_ipv6_tcp
                                udp
                                    udp
                                    ipv4_udp
                                    ipv6_udp
                                    pppoe_ipv4_udp
                                    pppoe_ipv6_udp
                                igmp
                                    igmp
                                    igmp_v1_query
                                    igmp_v1_report
                                    igmp_v2_query
                                    igmp_v2_report
                                    igmp_v2_leave
                                    igmp_v3_query
                                    igmp_v3_report
                                    pppoe_igmp
                                    pppoe_igmp_v1_query
                                    pppoe_igmp_v1_report
                                    pppoe_igmp_v2_query
                                    pppoe_igmp_v2_report
                                    pppoe_igmp_v2_leave
                                    pppoe_igmp_v3_query
                                    pppoe_igmp_v3_report
                                mld
                                    mld
                                    mld_v1
                                    mld_v2
                                    mld_v1_query
                                    mld_v1_report
                                    mld_v1_done
                                    mld_v2_query
                                    mld_v2_report
                                    pppoe_mld
                                    pppoe_mld_v1
                                    pppoe_mld_v2
                                    pppoe_mld_v1_query
                                    pppoe_mld_v1_report
                                    pppoe_mld_v1_done
                                    pppoe_mld_v2_query
                                    pppoe_mld_v2_report
                                icmp
                                    icmp
                                    icmp_request
                                    icmp_reply
                                    icmp_dest_unreachable
                                    icmp_packet_too_big
                                    icmp_parameter_problem
                                    icmp_time_exceeded
                                    pppoe_icmp
                                    pppoe_icmp_time_exceeded
                                    pppoe_icmp_parameter_problem
                                    pppoe_icmp_packet_too_big
                                    pppoe_icmp_dest_unreachable
                                    pppoe_icmp_reply
                                    pppoe_icmp_request
                                icmpv6
                                    icmpv6
                                    icmpv6_rs
                                    icmpv6_ra
                                    icmpv6_ns
                                    icmpv6_na
                                    icmpv6_rm
                                    icmpv6_request
                                    icmpv6_reply
                                    icmpv6_dest_unreachable
                                    icmpv6_packet_too_big
                                    icmpv6_parameter_problem
                                    icmpv6_time_exceeded
                                    pppoe_icmpv6
                                    pppoe_icmpv6_rs
                                    pppoe_icmpv6_ra
                                    pppoe_icmpv6_ns
                                    pppoe_icmpv6_na
                                    pppoe_icmpv6_rm
                                    pppoe_icmpv6_request
                                    pppoe_icmp_reply
                                    pppoe_icmp_dest_unreachable
                                    pppoe_icmp_packet_too_big
                                    pppoe_icmp_parameter_problem
                                    pppoe_icmp_time_exceeded
                                arp
                                    arp
                                    arp_request
                                    arp_response
                                    rarp
                                    rarp_request
                                    rarp_response
                                custom
                    testblock
                        由微码添加在报文尾部
                            格式
                            域段来源
                                ptx_sn
                                    PIE周期发包时会自动产生ptx_sn，微码从PIE下插报文的pktctrl中获得ptx_sn后编辑到testblock中
                                streamidx
                                    微码从PIE下插报文的pktinfo中获得streamidx后编辑到testblock中
                    fcs
                        由ETH MAC自动添加
            具体实现
                L1
                    generate_pdu_ether
                    generate_pdu_custom
                    generate_pdu_pppoe
                    generate_pdu_tcp
                    generate_pdu_udp
                    generate_pdu_igmp
                    generate_pdu_mld
                    generate_pdu_icmp
                    generate_pdu_icmpv6
                    generate_pdu_arp
                L0
                    etherhdr
                    vlanhdr
                    pppoehdr
                    ipv4hdr
                    ipv6hdr
                    arphdr
                    tcphdr
                    udphdr
                    icmphdr
                    icmpv6hdr
                    customhdr
        使能发包
            软件处理
                清除周期发包通道的收发统计
                修改周期发包通道的当前发包序列号，保证发包计数从0开始
                周期发包通道级使能
                周期发包全局使能
            微码处理
                发送方向
                    1、微码接收到PIE下插的数据报文，从pktctrl解析出ptx_sn
                    2、微码接收到PIE下插的数据报文，从pktinfo解析出qid, portid, csum_en, csum_type, css, streamidx 
                    3、微码根据ptx_sn和streamidx生成testblock，并编辑到报文尾部
                    4、微码根据portid进行报文数和字节数的统计
                    5、微码根据streamidx进行报文数字节数的统计
                    6、微码根据csum_en, csum_type, css指示PE进行Checksum计算
                    7、微码删除pktctrl和pktinfo后向对应的qid转发报文
                接收方向
                    1、微码接收到来源ETH端口的数据报文，从带外获得ETH MAC的FCS校验结果
                    2、微码在报文净荷前添加pktinfo
                    3、软件通过中断方式从PIE接收数据报文
                    4、软件从pktinfo中获得fcs校验结果, portid, l4_csum_err, l3_csum_err
                    5、软件从报文净荷尾部获得testblock（sn, streamidx）
                    6、软件根据portid进行报文数和字节数的统计
                    7、软件根据streamidx进行报文数和字节数的统计
                    8、软件根据l4_csum_err基于portid和streamidx分别进行统计
                    9、软件根据l3_csum_err基于portid和streamidx分别进行统计
                    10、软件根据fcs校验结果基于portid和streamidx分别进行统计
                    11、软件根据sn进行streamidx的乱序检测和统计
                    12、软件根据streamidx分别缓存接收到的数据报文
                        每个streamidx缓存256个报文
                            采用FIFO存储，循环覆盖，基于头尾指针进行控制
                        缓存pktinfo和报文净荷
        停止发包
            周期发包全局去使能
            周期发包通道级去使能
        测试校验
            1、软件支持报文净荷的解析
                提供命令行查询
